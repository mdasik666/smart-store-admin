{"version":3,"file":"static/js/365.26de7056.chunk.js","mappings":"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","sources":["pages/Admin/Orderlist/Aorder.tsx"],"sourcesContent":["import { Alert, Paper, Snackbar, Stack, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from \"@mui/material\";\r\nimport { AxiosError } from \"axios\";\r\nimport { IPropsError, IPropsOrders } from \"pages/Interface\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { adminGetOrders, adminLoginVerify } from \"services/Adminservice\";\r\n\r\nconst Aorder = () => {\r\n    const nav = useNavigate()\r\n    const [snackopen, setSnackOpen] = useState<IPropsError>({ open: false, severity: undefined, message: \"\" })\r\n    const [orderKey, setOrderKey] = useState<Array<any>>([]);\r\n    const [orderList, setOrderList] = useState<IPropsOrders[]>([]);\r\n    const [isLoading, setLoading] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            if (localStorage.getItem(\"admintoken\")) {\r\n                try {\r\n                    setLoading(true)\r\n                    const verify = await adminLoginVerify(String(localStorage.getItem(\"admintoken\")));\r\n                    if (verify.data.status === \"Success\") {\r\n                        const { _id: adminId } = verify.data.data\r\n                        const orderList = await adminGetOrders(adminId)\r\n                        setOrderList(orderList.data.orderList)\r\n                        const { _id, userId, orderedProducts, paymentType, shippingAddress, paid, deliveryStatus } = orderList.data.orderList[0]\r\n                        setOrderKey(Object.keys({ _id, userId, orderedProducts, paymentType, shippingAddress, paid, deliveryStatus }))\r\n                    } else {\r\n                        nav(\"/admin/login\")\r\n                    }\r\n                    setLoading(false)\r\n                } catch (error: unknown) {\r\n                    setSnackOpen({ open: true, severity: \"warning\", message: (error as AxiosError).message })\r\n                    setLoading(false)\r\n                }\r\n            } else {\r\n                nav(\"/admin/login\")\r\n            }\r\n        })();\r\n    }, [])\r\n\r\n    const handleClose = (_event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setSnackOpen({ open: false, severity: undefined, message: \"\" });\r\n    };\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n    const handleChangePage = (_event: unknown, newPage: number) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Stack spacing={2} direction={\"column\"} alignItems={\"center\"} width={\"100%\"}>\r\n                {\r\n                    isLoading ? <div>Loading...</div> :\r\n                        orderList.length ?\r\n                            (<Paper sx={{ width: '100%', overflow: 'hidden' }}>\r\n                                <TableContainer>\r\n                                    <Table stickyHeader aria-label=\"sticky table\">\r\n                                        <TableHead>\r\n                                            <TableRow hover>\r\n                                                {orderKey?.map((plKey: keyof IPropsOrders, i: number) => (\r\n                                                    plKey !== \"_id\" &&\r\n                                                    <TableCell key={i} align={\"center\"} sx={{ textTransform: \"capitalize\", bgcolor: \"black\", color: \"white\" }}>{plKey.replace(/([A-Z])/g, ' $1')}</TableCell>\r\n                                                ))}\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {orderList.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((ordList: IPropsOrders) => {\r\n                                                return (\r\n                                                    <TableRow hover role=\"checkbox\" tabIndex={-1} key={ordList._id}>\r\n                                                        {orderKey?.map((plKey: keyof IPropsOrders, i: number) => {\r\n                                                            return (\r\n                                                                plKey !== \"_id\" &&\r\n                                                                (<TableCell key={i} align={\"center\"}>\r\n                                                                    {ordList[plKey].toString()}\r\n                                                                </TableCell>)\r\n                                                            );\r\n                                                        })}\r\n                                                    </TableRow>\r\n                                                );\r\n                                            })}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                                <TablePagination\r\n                                    rowsPerPageOptions={[5, 10, 25, 100]}\r\n                                    component=\"div\"\r\n                                    count={orderList.length}\r\n                                    rowsPerPage={rowsPerPage}\r\n                                    page={page}\r\n                                    onPageChange={handleChangePage}\r\n                                    onRowsPerPageChange={handleChangeRowsPerPage}\r\n                                />\r\n                            </Paper>)\r\n                            : <div>Product Not Found</div>\r\n                }\r\n            </Stack>\r\n            {snackopen.open && <Snackbar open={snackopen.open} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}>\r\n                <Alert onClose={handleClose} severity={snackopen.severity} sx={{ width: '100%' }}>\r\n                    {snackopen.message}\r\n                </Alert>\r\n            </Snackbar>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Aorder;"],"names":["Aorder","nav","useNavigate","snackopen","setSnackOpen","useState","open","severity","undefined","message","orderKey","setOrderKey","orderList","setOrderList","isLoading","setLoading","useEffect","localStorage","getItem","verify","adminLoginVerify","String","data","status","_id","adminId","adminGetOrders","userId","orderedProducts","paymentType","shippingAddress","paid","deliveryStatus","Object","keys","error","handleClose","_event","reason","page","setPage","rowsPerPage","setRowsPerPage","_jsxs","_Fragment","children","_jsx","Stack","spacing","direction","alignItems","width","length","Paper","sx","overflow","TableContainer","Table","stickyHeader","TableHead","TableRow","hover","map","plKey","i","TableCell","align","textTransform","bgcolor","color","replace","TableBody","slice","ordList","role","tabIndex","toString","TablePagination","rowsPerPageOptions","component","count","onPageChange","handleChangePage","newPage","onRowsPerPageChange","event","target","value","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}